@model TheTallTankardTavern.Models.CharacterModel
@addTagHelper *, TheTallTankardTavern
@using static TheTallTankardTavern.Configuration.Constants
@using TTT.String

@{
    string[] ItemTypes = ConfigurationSettings.Item_Types["item_types"];

    string PillId(string itemType)
    {
        return $"character-items-inventory-{itemType.ToLower().Replace(" ", "-")}";
    }

    string ValidateInventory(ItemModel Item)
    {
        if (Item.Item_Type.EqualsAny(ITEM_TYPES.ARMOUR, ITEM_TYPES.WEAPON))
        {
            return "invalid-row";
        }
        return "";
    }
}

<style>
    #character-items-inventory input[type=button] {
        width: 100%;
    }
</style>

@*<partial name="/Views/Shared/Custom/_PopupModalPartial.cshtml" />*@

<div class="character-items-inventory">
    <div>INVENTORY ITEMS</div>
    <div class="nav nav-pills">
        <a class="nav-item nav-link active" data-toggle="pill" href="#character-items-inventory-all">
            <strong>All</strong>
        </a>
        @for (int i = 0; i < ItemTypes.Length; i++)
        {
            <a class="nav-item nav-link" data-toggle="pill" href="#@PillId(ItemTypes[i])">
                <strong>@ItemTypes[i]</strong>
            </a>
        }
    </div>
    <br />
    <div class="tab-content">
        <div class="tab-pane active" id="character-items-inventory-all">
            <table table-hover="true">
                <thead>
                    <tr>
                        <th>Name</th>
                        <th>Type</th>
                        <th>Attack</th>
                        <th>Damage</th>
                        <th>AC</th>
                        <th>Weight</th>
                        <th>Damage/Resistance Type</th>
                        <th></th>
                        <th></th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (string iid in Model.Inventory.OrderBy(i => ItemDataContext.GetModelFromID(i).Name))
                    {
                        ItemModel Item = ItemDataContext.GetModelFromID(iid);
                        <tr class="@ValidateInventory(Item)" data-toggle="modal" data-target="#popup-modal" data-title="@Item.Name" data-desc="@(Item.Desc + Item.Weapon_Trait_Desc)">
                            <td>@Item.Name</td>
                            <td>@Item.Type</td>
                            <td>@Item.Attack</td>
                            <td>@Item.Damage</td>
                            <td>@Item.Armour_Class</td>
                            <td>@Item.Weight_Class</td>
                            <td>@Item.Damage_Types.ToString()</td>
                            @if (Item.Item_Type.EqualsAny(ITEM_TYPES.ARMOUR, ITEM_TYPES.WEAPON))
                            {
                                <td><button class="td-action-btn" value="Equip" onclick="equipItem('@Model.ID', '@Item.ID')"></button></td>
                            }
                            else
                            {
                                <td></td>
                            }
                            <td><button class="td-action-btn" value="Remove" onclick="removeItemFromInventory('@Model.ID', '@Item.ID')"></button></td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
        @for (int i = 0; i < ItemTypes.Length; i++)
        {
            <div class="tab-pane" id="@PillId(ItemTypes[i])">
                <table table-hover="true">
                    <thead>
                        <tr>
                            <th>Name</th>
                            <th>Type</th>
                            <th>Attack</th>
                            <th>Damage</th>
                            <th>AC</th>
                            <th>Weight</th>
                            <th>Damage/Resistance Type</th>
                            <th></th>
                            <th></th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (string itemid in Model.Inventory.Where(id => ItemDataContext.GetModelFromID(id)
                         .Item_Type.Equals(ItemTypes[i])).OrderBy(i => ItemDataContext.GetModelFromID(i).Name))
                        {
                            ItemModel Item = ItemDataContext.GetModelFromID(itemid);
                            <tr class="@ValidateInventory(Item)" data-toggle="modal" data-target="#popup-modal" data-title="@Item.Name" data-desc="@(Item.Desc + Item.Weapon_Trait_Desc)">
                                <td>@Item.Name</td>
                                <td>@Item.Type</td>
                                <td>@Item.Attack</td>
                                <td>@Item.Damage</td>
                                <td>@Item.Armour_Class</td>
                                <td>@Item.Weight_Class</td>
                                <td>@Item.Damage_Types.ToString()</td>
                                @if (Item.Item_Type.EqualsAny(ITEM_TYPES.ARMOUR, ITEM_TYPES.WEAPON))
                                {
                                    <td><button class="td-action-btn" value="Equip" onclick="equipItem('@Model.ID', '@Item.ID')"></button></td>
                                }
                                else
                                {
                                    <td></td>
                                }
                                <td><button class="td-action-btn" value="Remove" onclick="removeItemFromInventory('@Model.ID', '@Item.ID')"></button></td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        }
    </div>
</div>