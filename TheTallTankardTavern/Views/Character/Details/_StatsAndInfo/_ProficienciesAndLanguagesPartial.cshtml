@using TTT.Items
@using TTT.Collections.Generic.Extensions
@using System.Collections.Generic;
@using TTT.Enumerator
@using static TheTallTankardTavern.Configuration.Constants

@model TheTallTankardTavern.Models.CharacterModel
@addTagHelper *, TheTallTankardTavern

@{
    Dictionary<string, bool> ApplicableProficencies = Model.WeaponArmourProficiencies.ToDictionary(k => k.Key, v => v.Value);

    //Only take the ones that are applicable
    ApplicableProficencies = ApplicableProficencies.Where(kvp => ApplicableProficencies[kvp.Key]).ToDictionary(k => k.Key, v => v.Value);

    //If character has all child weapon types of a parent type, swap the children for the parent
    if (Model.WeaponArmourProficiencies.SimpleMeleeWeaponKeys.All(k => ApplicableProficencies.ContainsKey(k)))
    {
        ApplicableProficencies.RemoveAll((k, v) => ItemType.SimpleMeleeWeapon.HasChildType(k));
        ApplicableProficencies[ItemType.SimpleMeleeWeapon] = true;
    }
    if (Model.WeaponArmourProficiencies.SimpleRangedWeaponKeys.All(k => ApplicableProficencies.ContainsKey(k)))
    {
        ApplicableProficencies.RemoveAll((k, v) => ItemType.SimpleRangedWeapon.HasChildType(k));
        ApplicableProficencies[ItemType.SimpleRangedWeapon] = true;
    }
    if (Model.WeaponArmourProficiencies.MartialMeleeWeaponKeys.All(k => ApplicableProficencies.ContainsKey(k)))
    {
        ApplicableProficencies.RemoveAll((k, v) => ItemType.MartialMeleeWeapon.HasChildType(k));
        ApplicableProficencies[ItemType.MartialMeleeWeapon] = true;
    }
    if (Model.WeaponArmourProficiencies.MartialRangedWeaponKeys.All(k => ApplicableProficencies.ContainsKey(k)))
    {
        ApplicableProficencies.RemoveAll((k, v) => ItemType.MartialRangedWeapon.HasChildType(k));
        ApplicableProficencies[ItemType.MartialRangedWeapon] = true;
    }

}

<div id="character-proficiencies">
    <span class="grouped-stats-label">PROFICIENCIES &amp; LANGUAGES</span>
    <div class="grouped-stats row">
        <div id="weapon-armour-proficiency-card" class="card stat-card other-stat-card col-md-4">
            <div class="card-body">
                <div class="stat-card-label-header">WEAPONS &amp; ARMOUR</div>
                <div class="stat-card-content">
                    @{ string[] profArray = ApplicableProficencies.Keys.ToArray();}
                    <textarea class="readonly-textarea" readonly="readonly" rows="@profArray.Length">
                        @for (int i = 0; i < profArray.Length; i++)
                        {
                            @(profArray[i] + (i == profArray.Length - 1 ? "" : "\n"))
                        }
                    </textarea>
                </div>
            </div>
        </div>
        <div id="other-proficiencies-card" class="card stat-card other-stat-card col-md-4">
            <div class="card-body">
                <div class="stat-card-label-header">OTHER</div>
                <div class="stat-card-content">
                    @if (!string.IsNullOrEmpty(Model.Proficiencies))
                    {
                        <textarea class="readonly-textarea" readonly="readonly" asp-for="Proficiencies" rows="@Model.Proficiencies.Split("\n").Length"></textarea>
                    }
                    else
                    {
                        <textarea class="readonly-textarea" readonly="readonly">Wow really? Nothing?</textarea>
                    }
                </div>
            </div>
        </div>
        <div id="languages-card" class="card stat-card other-stat-card col-md-4">
            <div class="card-body">
                <div class="stat-card-label-header">KNOWN LANGUAGES</div>
                <div class="stat-card-content">
                    <textarea class="readonly-textarea" readonly="readonly" rows="@Model.Languages.Where(l => l).Count()">
                @{ LANGUAGES[] langArray = ModelListHelper.AllValues<LANGUAGES>().ToArray();}
                @for (int i = 0; i < langArray.Length; i++)
                {
                    if (Model.Languages[langArray[i]])
                    {
                        @(langArray[i].EnumToString() + (i == langArray.Length - 1 ? "" : "\n"))
                    }
                }
                </textarea>
                </div>
            </div>
        </div>
    </div>
</div>
