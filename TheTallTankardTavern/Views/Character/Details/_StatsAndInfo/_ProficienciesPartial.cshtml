@using TTT.Items
@using TTT.Collections.Generic.Extensions
@model TheTallTankardTavern.Models.CharacterModel
@addTagHelper *, TheTallTankardTavern

@{
    Dictionary<string, bool> ApplicableProficencies = Model.WeaponArmourProficiencies.ToDictionary(k => k.Key, v => v.Value);

    //Only take the ones that are applicable
    ApplicableProficencies = ApplicableProficencies.Where(kvp => ApplicableProficencies[kvp.Key]).ToDictionary(k => k.Key, v => v.Value);

    //If character has all child weapon types of a parent type, swap the children for the parent
    if (Model.WeaponArmourProficiencies.SimpleMeleeWeaponKeys.All(k => ApplicableProficencies.ContainsKey(k)))
    {
        ApplicableProficencies.RemoveAll((k, v) => ItemType.SimpleMeleeWeapon.HasChildType(k));
        ApplicableProficencies[ItemType.SimpleMeleeWeapon] = true;
    }
    if (Model.WeaponArmourProficiencies.SimpleRangedWeaponKeys.All(k => ApplicableProficencies.ContainsKey(k)))
    {
        ApplicableProficencies.RemoveAll((k, v) => ItemType.SimpleRangedWeapon.HasChildType(k));
        ApplicableProficencies[ItemType.SimpleRangedWeapon] = true;
    }
    if (Model.WeaponArmourProficiencies.MartialMeleeWeaponKeys.All(k => ApplicableProficencies.ContainsKey(k)))
    {
        ApplicableProficencies.RemoveAll((k, v) => ItemType.MartialMeleeWeapon.HasChildType(k));
        ApplicableProficencies[ItemType.MartialMeleeWeapon] = true;
    }
    if (Model.WeaponArmourProficiencies.MartialRangedWeaponKeys.All(k => ApplicableProficencies.ContainsKey(k)))
    {
        ApplicableProficencies.RemoveAll((k, v) => ItemType.MartialRangedWeapon.HasChildType(k));
        ApplicableProficencies[ItemType.MartialRangedWeapon] = true;
    }

}

<style>
    #character-other-proficiencies textarea {
        resize: none;
        border: none;
        background: transparent;
    }
</style>
<strong>Proficiencies</strong>
<div id="character-other-proficiencies">
    <u>Miscellaneous</u>
    @if (!string.IsNullOrEmpty(Model.Proficiencies))
    {
        <textarea readonly="readonly" asp-for="Proficiencies" rows="4"></textarea>
    }
    else
    {
        <textarea readonly="readonly">Wow really? Nothing?</textarea>
    }
</div>
<div class="character-weapon-armour-proficiencies">
    <u>Weapon &amp; Armour</u>
    <table>
        <tbody>

            @foreach (string prof in ApplicableProficencies.Select(kvp => kvp.Key).OrderBy(s => s))
            {
                <tr>
                    <td>@prof</td>
                </tr>
            }
        </tbody>
    </table>
</div>