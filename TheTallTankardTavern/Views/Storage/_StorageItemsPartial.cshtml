@addTagHelper *, TheTallTankardTavern

@using System.Collections.Generic;
@using TheTallTankardTavern.Models
@using TheTallTankardTavern.Configuration
@using TTT.Items

@model StorageModel

@{
    CharacterModel CurrentCharacter = CharacterDataContext.GetModelFromID(ContextUser.Current.ActiveCharacterID);
}

<div class="col-md-6">        
    <table>
        <tr>
            <th colspan="3">
                @if (CurrentCharacter != null)
                {
                    <span>
                        <strong>@(CurrentCharacter.Name)'s Inventory (@CurrentCharacter.Inventory.CurrentWeight / @CurrentCharacter.CarryCapacity() lbs)</strong>
                        @if (CurrentCharacter.IsEncumbered())
                        {
                            <span style="color:red">ENCUMBERED! Half speed, disadvantage on STR/DEX/CON checks, attacks, and saves</span>
                        }
                    </span>
                }
                else
                {
                    <span style="color:red">Your profile does not have an active character selected</span>
                }
            </th>
        </tr>
        @if (CurrentCharacter != null)
        {
            @foreach (string inventoryID in CurrentCharacter.Inventory.OrderBy(s => ItemDataContext.GetModelFromInventoryID(s).Name))
            {
                ItemModel Item = ItemDataContext.GetModelFromInventoryID(inventoryID).Clone();
                Item.InventoryID = inventoryID;
                <tr>
                    <td width="100px"><button class="td-action-btn" value="Store" onclick="depositItem('@CurrentCharacter.ID', '@Item.InventoryID')"></button></td>
                    <td>@Item.Name</td>
                    <td>(@Item.Weight lbs)</td>
                </tr>
            }
        }
    </table>
</div>
<div class="col-md-6">
    <table>
        <tr>
            <th colspan="4">
                <strong>@(Model.Name)'s Inventory (@Model.Inventory.CurrentWeight / @Model.MaxCapacity lbs)</strong>
                @if (Model.Inventory.CurrentWeight > Model.MaxCapacity)
                {
                    <span style="color:red">Storage is overweight, remove some items!</span>
                }
            </th>
        </tr>
@*        @foreach (string inventoryID in Model.Inventory.OrderBy(s => ItemDataContext.GetModelFromInventoryID(s).Name))
        {
            ItemModel Item = ItemDataContext.GetModelFromInventoryID(inventoryID).Clone();
            Item.InventoryID = inventoryID;
            
            <tr>
                <td width="100px"><button class="td-action-btn" value="Take" onclick="withdrawItem('@CurrentCharacter.ID', '@Item.InventoryID')"></button></td>
                <td>@Item.Name</td>
                <td>(@Item.Weight lbs)</td>
            </tr>
        }*@
        @foreach (KeyValuePair<string, int> pair in Model.Inventory.CompactInventory)
        {
            ItemModel Item = ItemDataContext.GetModelFromID(pair.Key);
            string firstInstanceOfThisItem = Model.Inventory.First(iid => ItemDataContext.GetModelFromInventoryID(iid).ID.Equals(Item.ID));
            <tr>
                <td width="100px"><button class="td-action-btn" value="Take" onclick="withdrawItem('@CurrentCharacter.ID', '@firstInstanceOfThisItem')"></button></td>
                <td>@Item.Name</td>
                <td>(@Item.Weight lbs)</td>
                <td>x @pair.Value</td>
            </tr>
        }
    </table>
</div>
